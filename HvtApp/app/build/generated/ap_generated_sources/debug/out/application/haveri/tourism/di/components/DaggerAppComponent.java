// Generated by Dagger (https://google.github.io/dagger).
package application.haveri.tourism.di.components;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import androidx.fragment.app.Fragment;
import application.haveri.tourism.HaveriApplication;
import application.haveri.tourism.HaveriApplication_MembersInjector;
import application.haveri.tourism.ViewModelProviderFactory;
import application.haveri.tourism.ViewModelProviderFactory_Factory;
import application.haveri.tourism.data.AppDataManager;
import application.haveri.tourism.data.AppDataManager_Factory;
import application.haveri.tourism.data.DataManager;
import application.haveri.tourism.data.local.db.AppDatabase;
import application.haveri.tourism.data.local.db.AppDbHelper;
import application.haveri.tourism.data.local.db.AppDbHelper_Factory;
import application.haveri.tourism.data.local.db.DbHelper;
import application.haveri.tourism.data.local.prefs.AppPreferencesHelper;
import application.haveri.tourism.data.local.prefs.AppPreferencesHelper_Factory;
import application.haveri.tourism.data.local.prefs.PreferencesHelper;
import application.haveri.tourism.data.remote.ApiHeader;
import application.haveri.tourism.data.remote.ApiHeader_Factory;
import application.haveri.tourism.data.remote.ApiHeader_PublicApiHeader_Factory;
import application.haveri.tourism.data.remote.ApiHelper;
import application.haveri.tourism.data.remote.AppApiHelper;
import application.haveri.tourism.data.remote.AppApiHelper_Factory;
import application.haveri.tourism.di.builder.ActivityBuilder_BindAboutActivity;
import application.haveri.tourism.di.builder.ActivityBuilder_BindEventDetailActivity;
import application.haveri.tourism.di.builder.ActivityBuilder_BindHomeActivity;
import application.haveri.tourism.di.builder.ActivityBuilder_BindImageViewActivity;
import application.haveri.tourism.di.builder.ActivityBuilder_BindMapSingleActivity;
import application.haveri.tourism.di.builder.ActivityBuilder_BindPlaceActivity;
import application.haveri.tourism.di.builder.ActivityBuilder_BindSettingActivity;
import application.haveri.tourism.di.builder.ActivityBuilder_BindSplashActivity;
import application.haveri.tourism.di.builder.ActivityBuilder_BindTalukActivity;
import application.haveri.tourism.di.builder.ActivityBuilder_BindVideosExploreActivity;
import application.haveri.tourism.di.module.AppModule;
import application.haveri.tourism.di.module.AppModule_ProvideApiHelperFactory;
import application.haveri.tourism.di.module.AppModule_ProvideApiKeyFactory;
import application.haveri.tourism.di.module.AppModule_ProvideAppDatabaseFactory;
import application.haveri.tourism.di.module.AppModule_ProvideContextFactory;
import application.haveri.tourism.di.module.AppModule_ProvideDataManagerFactory;
import application.haveri.tourism.di.module.AppModule_ProvideDatabaseNameFactory;
import application.haveri.tourism.di.module.AppModule_ProvideDbHelperFactory;
import application.haveri.tourism.di.module.AppModule_ProvideGsonFactory;
import application.haveri.tourism.di.module.AppModule_ProvidePreferenceNameFactory;
import application.haveri.tourism.di.module.AppModule_ProvidePreferencesHelperFactory;
import application.haveri.tourism.di.module.AppModule_ProvideProtectedApiHeaderFactory;
import application.haveri.tourism.di.module.AppModule_ProvideSchedulerProviderFactory;
import application.haveri.tourism.ui.activity.about.AboutActivity;
import application.haveri.tourism.ui.activity.event.EventDetailActivity;
import application.haveri.tourism.ui.activity.home.HomeActivity;
import application.haveri.tourism.ui.activity.home.HomeActivity_MembersInjector;
import application.haveri.tourism.ui.activity.map.MapSingleActivity;
import application.haveri.tourism.ui.activity.map.MapSingleActivity_MembersInjector;
import application.haveri.tourism.ui.activity.media.image.ImageViewActivity;
import application.haveri.tourism.ui.activity.media.image.ImageViewActivityModule;
import application.haveri.tourism.ui.activity.media.image.ImageViewActivityModule_ProvideImageViewAdapterFactory;
import application.haveri.tourism.ui.activity.media.image.ImageViewActivity_MembersInjector;
import application.haveri.tourism.ui.activity.media.video.VideosExploreActivity;
import application.haveri.tourism.ui.activity.media.video.VideosExploreActivity_MembersInjector;
import application.haveri.tourism.ui.activity.place.PlaceActivity;
import application.haveri.tourism.ui.activity.place.PlaceActivity_MembersInjector;
import application.haveri.tourism.ui.activity.setting.SettingActivity;
import application.haveri.tourism.ui.activity.splash.SplashActivity;
import application.haveri.tourism.ui.activity.taluk.TalukActivity;
import application.haveri.tourism.ui.activity.taluk.TalukActivity_MembersInjector;
import application.haveri.tourism.ui.base.BaseActivity_MembersInjector;
import application.haveri.tourism.ui.base.BaseFragment_MembersInjector;
import application.haveri.tourism.ui.fragment.home.HomeFragment;
import application.haveri.tourism.ui.fragment.home.HomeFragmentModule;
import application.haveri.tourism.ui.fragment.home.HomeFragmentModule_ProvideEventsAdapterFactory;
import application.haveri.tourism.ui.fragment.home.HomeFragmentModule_ProvideGridLayoutManagerFactory;
import application.haveri.tourism.ui.fragment.home.HomeFragmentModule_ProvideHomePlaceAdapterFactory;
import application.haveri.tourism.ui.fragment.home.HomeFragmentModule_ProvideImageGalleryAdapterFactory;
import application.haveri.tourism.ui.fragment.home.HomeFragmentModule_ProvideLinearLayoutManagerFactory;
import application.haveri.tourism.ui.fragment.home.HomeFragmentModule_ProvideSliderAdapterFactory;
import application.haveri.tourism.ui.fragment.home.HomeFragmentModule_ProvideTalukAdapterFactory;
import application.haveri.tourism.ui.fragment.home.HomeFragmentProvider_ProvideHomeFragment;
import application.haveri.tourism.ui.fragment.home.HomeFragment_MembersInjector;
import application.haveri.tourism.ui.fragment.place.place_details.PlaceDetailFragment;
import application.haveri.tourism.ui.fragment.place.place_details.PlaceDetailFragmentProvider_ProvidePlaceDetailFragment;
import application.haveri.tourism.ui.fragment.place.place_details.about.PlaceAboutFragment;
import application.haveri.tourism.ui.fragment.place.place_details.about.PlaceAboutFragmentProvider_ProvidePlaceAboutFragment;
import application.haveri.tourism.ui.fragment.place.place_details.events.PlaceEventFragment;
import application.haveri.tourism.ui.fragment.place.place_details.events.PlaceEventFragmentModule;
import application.haveri.tourism.ui.fragment.place.place_details.events.PlaceEventFragmentModule_ProvideEventsAdapterFactory;
import application.haveri.tourism.ui.fragment.place.place_details.events.PlaceEventFragmentModule_ProvideLinearLayoutManagerFactory;
import application.haveri.tourism.ui.fragment.place.place_details.events.PlaceEventFragmentProvider_GetPlaceEventFragment;
import application.haveri.tourism.ui.fragment.place.place_details.events.PlaceEventFragment_MembersInjector;
import application.haveri.tourism.ui.fragment.place.place_details.gallery.PlaceGalleryFragment;
import application.haveri.tourism.ui.fragment.place.place_details.gallery.PlaceGalleryFragmentModule;
import application.haveri.tourism.ui.fragment.place.place_details.gallery.PlaceGalleryFragmentModule_ProvideImageGalleryAdapterFactory;
import application.haveri.tourism.ui.fragment.place.place_details.gallery.PlaceGalleryFragmentModule_ProvidePlaceGridLayoutManagerFactory;
import application.haveri.tourism.ui.fragment.place.place_details.gallery.PlaceGalleryFragmentProvider_ProvidePlaceGalleryFragment;
import application.haveri.tourism.ui.fragment.place.place_details.gallery.PlaceGalleryFragment_MembersInjector;
import application.haveri.tourism.ui.fragment.place.place_details.video.PlaceVideosFragment;
import application.haveri.tourism.ui.fragment.place.place_details.video.PlaceVideosFragmentModule;
import application.haveri.tourism.ui.fragment.place.place_details.video.PlaceVideosFragmentModule_GetVideoListAdapterFactory;
import application.haveri.tourism.ui.fragment.place.place_details.video.PlaceVideosFragmentModule_ProvideLinearLayoutManagerFactory;
import application.haveri.tourism.ui.fragment.place.place_details.video.PlaceVideosFragmentProvider_GetPlaceVideosFragment;
import application.haveri.tourism.ui.fragment.place.place_details.video.PlaceVideosFragment_MembersInjector;
import application.haveri.tourism.ui.fragment.place.place_list.PlaceListFragment;
import application.haveri.tourism.ui.fragment.place.place_list.PlaceListFragmentModule;
import application.haveri.tourism.ui.fragment.place.place_list.PlaceListFragmentModule_ProvideLinearLayoutManagerFactory;
import application.haveri.tourism.ui.fragment.place.place_list.PlaceListFragmentModule_ProvidePlaceListAdapterFactory;
import application.haveri.tourism.ui.fragment.place.place_list.PlaceListFragmentProvider_ProvidePlaceListFragment;
import application.haveri.tourism.ui.fragment.place.place_list.PlaceListFragment_MembersInjector;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.TalukDetailFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.TalukDetailFragmentProvider_ProvideTalukDetailFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.about.TalukAboutFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.about.TalukAboutFragmentProvider_ProvideTalukAboutFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.events.TalukEventFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.events.TalukEventFragmentModule;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.events.TalukEventFragmentModule_ProvideEventsAdapterFactory;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.events.TalukEventFragmentModule_ProvideLinearLayoutManagerFactory;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.events.TalukEventFragmentProvider_GetTalukEventFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.events.TalukEventFragment_MembersInjector;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.gallery.TalukGalleryFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.gallery.TalukGalleryFragmentModule;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.gallery.TalukGalleryFragmentModule_ProvideImageGalleryAdapterFactory;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.gallery.TalukGalleryFragmentModule_ProvideTalukGridLayoutManagerFactory;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.gallery.TalukGalleryFragmentProvider_ProvideTalukGalleryFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.gallery.TalukGalleryFragment_MembersInjector;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.places.TalukPlacesFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.places.TalukPlacesFragmentModule;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.places.TalukPlacesFragmentModule_ProvideLinearLayoutManagerFactory;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.places.TalukPlacesFragmentModule_ProvidePlaceAdapterFactory;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.places.TalukPlacesFragmentProvider_GetTalukPlacesFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.places.TalukPlacesFragment_MembersInjector;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.video.TalukVideosFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.video.TalukVideosFragmentModule;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.video.TalukVideosFragmentModule_ProvideLinearLayoutManagerFactory;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.video.TalukVideosFragmentModule_ProvideVideoListAdapterFactory;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.video.TalukVideosFragmentProvider_GetTalukVideosFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_detail.video.TalukVideosFragment_MembersInjector;
import application.haveri.tourism.ui.fragment.taluk.taluk_list.TalukListFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_list.TalukListFragmentModule;
import application.haveri.tourism.ui.fragment.taluk.taluk_list.TalukListFragmentModule_ProvideLinearLayoutManagerFactory;
import application.haveri.tourism.ui.fragment.taluk.taluk_list.TalukListFragmentModule_ProvideTalukAdapterFactory;
import application.haveri.tourism.ui.fragment.taluk.taluk_list.TalukListFragmentProvider_ProvideListFragment;
import application.haveri.tourism.ui.fragment.taluk.taluk_list.TalukListFragment_MembersInjector;
import application.haveri.tourism.ui.fragment.videos.play_video.PlayVideoFragment;
import application.haveri.tourism.ui.fragment.videos.play_video.PlayVideoFragmentProvider_ProvidePlayVideoFragment;
import application.haveri.tourism.ui.fragment.videos.video_list.ExploreVideoFragment;
import application.haveri.tourism.ui.fragment.videos.video_list.ExploreVideoFragmentModule;
import application.haveri.tourism.ui.fragment.videos.video_list.ExploreVideoFragmentModule_ProvideLinearLayoutManagerFactory;
import application.haveri.tourism.ui.fragment.videos.video_list.ExploreVideoFragmentModule_ProvideVideoListAdapterFactory;
import application.haveri.tourism.ui.fragment.videos.video_list.ExploreVideoFragmentProvider_ProvideExploreVideoFragment;
import application.haveri.tourism.ui.fragment.videos.video_list.ExploreVideoFragment_MembersInjector;
import com.google.gson.Gson;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private AppModule appModule;

  private Provider<ActivityBuilder_BindSplashActivity.SplashActivitySubcomponent.Builder>
      splashActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindHomeActivity.HomeActivitySubcomponent.Builder>
      homeActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindMapSingleActivity.MapSingleActivitySubcomponent.Builder>
      mapSingleActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindSettingActivity.SettingActivitySubcomponent.Builder>
      settingActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindTalukActivity.TalukActivitySubcomponent.Builder>
      talukActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindImageViewActivity.ImageViewActivitySubcomponent.Builder>
      imageViewActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindEventDetailActivity.EventDetailActivitySubcomponent.Builder>
      eventDetailActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityBuilder_BindVideosExploreActivity.VideosExploreActivitySubcomponent.Builder>
      videosExploreActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindPlaceActivity.PlaceActivitySubcomponent.Builder>
      placeActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindAboutActivity.AboutActivitySubcomponent.Builder>
      aboutActivitySubcomponentBuilderProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private AppModule_ProvideDatabaseNameFactory provideDatabaseNameProvider;

  private Provider<AppDatabase> provideAppDatabaseProvider;

  private Provider<AppDbHelper> appDbHelperProvider;

  private Provider<DbHelper> provideDbHelperProvider;

  private AppModule_ProvidePreferenceNameFactory providePreferenceNameProvider;

  private AppPreferencesHelper_Factory appPreferencesHelperProvider;

  private Provider<PreferencesHelper> providePreferencesHelperProvider;

  private AppModule_ProvideApiKeyFactory provideApiKeyProvider;

  private ApiHeader_PublicApiHeader_Factory publicApiHeaderProvider;

  private Provider<ApiHeader.ProtectedApiHeader> provideProtectedApiHeaderProvider;

  private Provider<ApiHeader> apiHeaderProvider;

  private Provider<AppApiHelper> appApiHelperProvider;

  private Provider<ApiHelper> provideApiHelperProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<AppDataManager> appDataManagerProvider;

  private Provider<DataManager> provideDataManagerProvider;

  private AppModule_ProvideSchedulerProviderFactory provideSchedulerProvider;

  private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(10)
        .put(SplashActivity.class, (Provider) splashActivitySubcomponentBuilderProvider)
        .put(HomeActivity.class, (Provider) homeActivitySubcomponentBuilderProvider)
        .put(MapSingleActivity.class, (Provider) mapSingleActivitySubcomponentBuilderProvider)
        .put(SettingActivity.class, (Provider) settingActivitySubcomponentBuilderProvider)
        .put(TalukActivity.class, (Provider) talukActivitySubcomponentBuilderProvider)
        .put(ImageViewActivity.class, (Provider) imageViewActivitySubcomponentBuilderProvider)
        .put(EventDetailActivity.class, (Provider) eventDetailActivitySubcomponentBuilderProvider)
        .put(
            VideosExploreActivity.class,
            (Provider) videosExploreActivitySubcomponentBuilderProvider)
        .put(PlaceActivity.class, (Provider) placeActivitySubcomponentBuilderProvider)
        .put(AboutActivity.class, (Provider) aboutActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private AppPreferencesHelper getAppPreferencesHelper() {
    return new AppPreferencesHelper(
        provideContextProvider.get(),
        AppModule_ProvidePreferenceNameFactory.proxyProvidePreferenceName(appModule));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.splashActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindSplashActivity.SplashActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindSplashActivity.SplashActivitySubcomponent.Builder get() {
            return new SplashActivitySubcomponentBuilder();
          }
        };
    this.homeActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindHomeActivity.HomeActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindHomeActivity.HomeActivitySubcomponent.Builder get() {
            return new HomeActivitySubcomponentBuilder();
          }
        };
    this.mapSingleActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindMapSingleActivity.MapSingleActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindMapSingleActivity.MapSingleActivitySubcomponent.Builder get() {
            return new MapSingleActivitySubcomponentBuilder();
          }
        };
    this.settingActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindSettingActivity.SettingActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindSettingActivity.SettingActivitySubcomponent.Builder get() {
            return new SettingActivitySubcomponentBuilder();
          }
        };
    this.talukActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindTalukActivity.TalukActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindTalukActivity.TalukActivitySubcomponent.Builder get() {
            return new TalukActivitySubcomponentBuilder();
          }
        };
    this.imageViewActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindImageViewActivity.ImageViewActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindImageViewActivity.ImageViewActivitySubcomponent.Builder get() {
            return new ImageViewActivitySubcomponentBuilder();
          }
        };
    this.eventDetailActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindEventDetailActivity.EventDetailActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindEventDetailActivity.EventDetailActivitySubcomponent.Builder
              get() {
            return new EventDetailActivitySubcomponentBuilder();
          }
        };
    this.videosExploreActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindVideosExploreActivity.VideosExploreActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindVideosExploreActivity.VideosExploreActivitySubcomponent.Builder
              get() {
            return new VideosExploreActivitySubcomponentBuilder();
          }
        };
    this.placeActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindPlaceActivity.PlaceActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindPlaceActivity.PlaceActivitySubcomponent.Builder get() {
            return new PlaceActivitySubcomponentBuilder();
          }
        };
    this.aboutActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindAboutActivity.AboutActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindAboutActivity.AboutActivitySubcomponent.Builder get() {
            return new AboutActivitySubcomponentBuilder();
          }
        };
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideContextProvider =
        DoubleCheck.provider(
            AppModule_ProvideContextFactory.create(builder.appModule, applicationProvider));
    this.provideDatabaseNameProvider =
        AppModule_ProvideDatabaseNameFactory.create(builder.appModule);
    this.provideAppDatabaseProvider =
        DoubleCheck.provider(
            AppModule_ProvideAppDatabaseFactory.create(
                builder.appModule, provideDatabaseNameProvider, provideContextProvider));
    this.appDbHelperProvider =
        DoubleCheck.provider(AppDbHelper_Factory.create(provideAppDatabaseProvider));
    this.provideDbHelperProvider =
        DoubleCheck.provider(
            AppModule_ProvideDbHelperFactory.create(builder.appModule, appDbHelperProvider));
    this.providePreferenceNameProvider =
        AppModule_ProvidePreferenceNameFactory.create(builder.appModule);
    this.appPreferencesHelperProvider =
        AppPreferencesHelper_Factory.create(provideContextProvider, providePreferenceNameProvider);
    this.providePreferencesHelperProvider =
        DoubleCheck.provider(
            AppModule_ProvidePreferencesHelperFactory.create(
                builder.appModule, appPreferencesHelperProvider));
    this.provideApiKeyProvider = AppModule_ProvideApiKeyFactory.create(builder.appModule);
    this.publicApiHeaderProvider = ApiHeader_PublicApiHeader_Factory.create(provideApiKeyProvider);
    this.provideProtectedApiHeaderProvider =
        DoubleCheck.provider(
            AppModule_ProvideProtectedApiHeaderFactory.create(
                builder.appModule, provideApiKeyProvider, providePreferencesHelperProvider));
    this.apiHeaderProvider =
        DoubleCheck.provider(
            ApiHeader_Factory.create(publicApiHeaderProvider, provideProtectedApiHeaderProvider));
    this.appApiHelperProvider =
        DoubleCheck.provider(AppApiHelper_Factory.create(apiHeaderProvider));
    this.provideApiHelperProvider =
        DoubleCheck.provider(
            AppModule_ProvideApiHelperFactory.create(builder.appModule, appApiHelperProvider));
    this.provideGsonProvider =
        DoubleCheck.provider(AppModule_ProvideGsonFactory.create(builder.appModule));
    this.appDataManagerProvider =
        DoubleCheck.provider(
            AppDataManager_Factory.create(
                provideContextProvider,
                provideDbHelperProvider,
                providePreferencesHelperProvider,
                provideApiHelperProvider,
                provideGsonProvider));
    this.provideDataManagerProvider =
        DoubleCheck.provider(
            AppModule_ProvideDataManagerFactory.create(builder.appModule, appDataManagerProvider));
    this.provideSchedulerProvider =
        AppModule_ProvideSchedulerProviderFactory.create(builder.appModule);
    this.viewModelProviderFactoryProvider =
        DoubleCheck.provider(
            ViewModelProviderFactory_Factory.create(
                provideDataManagerProvider, provideSchedulerProvider));
    this.appModule = builder.appModule;
  }

  @Override
  public void inject(HaveriApplication application) {
    injectHaveriApplication(application);
  }

  private HaveriApplication injectHaveriApplication(HaveriApplication instance) {
    HaveriApplication_MembersInjector.injectActivityDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class SplashActivitySubcomponentBuilder
      extends ActivityBuilder_BindSplashActivity.SplashActivitySubcomponent.Builder {
    private SplashActivity seedInstance;

    @Override
    public ActivityBuilder_BindSplashActivity.SplashActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(SplashActivity.class.getCanonicalName() + " must be set");
      }
      return new SplashActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SplashActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SplashActivitySubcomponentImpl
      implements ActivityBuilder_BindSplashActivity.SplashActivitySubcomponent {
    private SplashActivitySubcomponentImpl(SplashActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(SplashActivity arg0) {
      injectSplashActivity(arg0);
    }

    private SplashActivity injectSplashActivity(SplashActivity instance) {
      BaseActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      BaseActivity_MembersInjector.injectAppPreferencesHelper(
          instance, DaggerAppComponent.this.getAppPreferencesHelper());
      return instance;
    }
  }

  private final class HomeActivitySubcomponentBuilder
      extends ActivityBuilder_BindHomeActivity.HomeActivitySubcomponent.Builder {
    private HomeActivity seedInstance;

    @Override
    public ActivityBuilder_BindHomeActivity.HomeActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(HomeActivity.class.getCanonicalName() + " must be set");
      }
      return new HomeActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(HomeActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class HomeActivitySubcomponentImpl
      implements ActivityBuilder_BindHomeActivity.HomeActivitySubcomponent {
    private Provider<HomeFragmentProvider_ProvideHomeFragment.HomeFragmentSubcomponent.Builder>
        homeFragmentSubcomponentBuilderProvider;

    private HomeActivitySubcomponentImpl(HomeActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return Collections
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              singletonMap(HomeFragment.class, (Provider) homeFragmentSubcomponentBuilderProvider);
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final HomeActivitySubcomponentBuilder builder) {
      this.homeFragmentSubcomponentBuilderProvider =
          new Provider<
              HomeFragmentProvider_ProvideHomeFragment.HomeFragmentSubcomponent.Builder>() {
            @Override
            public HomeFragmentProvider_ProvideHomeFragment.HomeFragmentSubcomponent.Builder get() {
              return new HomeFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(HomeActivity arg0) {
      injectHomeActivity(arg0);
    }

    private HomeActivity injectHomeActivity(HomeActivity instance) {
      BaseActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      BaseActivity_MembersInjector.injectAppPreferencesHelper(
          instance, DaggerAppComponent.this.getAppPreferencesHelper());
      HomeActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class HomeFragmentSubcomponentBuilder
        extends HomeFragmentProvider_ProvideHomeFragment.HomeFragmentSubcomponent.Builder {
      private HomeFragmentModule homeFragmentModule;

      private HomeFragment seedInstance;

      @Override
      public HomeFragmentProvider_ProvideHomeFragment.HomeFragmentSubcomponent build() {
        if (homeFragmentModule == null) {
          this.homeFragmentModule = new HomeFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(HomeFragment.class.getCanonicalName() + " must be set");
        }
        return new HomeFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(HomeFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class HomeFragmentSubcomponentImpl
        implements HomeFragmentProvider_ProvideHomeFragment.HomeFragmentSubcomponent {
      private HomeFragmentModule homeFragmentModule;

      private Provider<HomeFragment> seedInstanceProvider;

      private HomeFragmentModule_ProvideLinearLayoutManagerFactory
          provideLinearLayoutManagerProvider;

      private HomeFragmentModule_ProvideGridLayoutManagerFactory provideGridLayoutManagerProvider;

      private HomeFragmentSubcomponentImpl(HomeFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final HomeFragmentSubcomponentBuilder builder) {
        this.homeFragmentModule = builder.homeFragmentModule;
        this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
        this.provideLinearLayoutManagerProvider =
            HomeFragmentModule_ProvideLinearLayoutManagerFactory.create(
                builder.homeFragmentModule, seedInstanceProvider);
        this.provideGridLayoutManagerProvider =
            HomeFragmentModule_ProvideGridLayoutManagerFactory.create(
                builder.homeFragmentModule, seedInstanceProvider);
      }

      @Override
      public void inject(HomeFragment arg0) {
        injectHomeFragment(arg0);
      }

      private HomeFragment injectHomeFragment(HomeFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        HomeFragment_MembersInjector.injectSliderAdapter(
            instance,
            HomeFragmentModule_ProvideSliderAdapterFactory.proxyProvideSliderAdapter(
                homeFragmentModule));
        HomeFragment_MembersInjector.injectHomeTalukAdapter(
            instance,
            HomeFragmentModule_ProvideTalukAdapterFactory.proxyProvideTalukAdapter(
                homeFragmentModule));
        HomeFragment_MembersInjector.injectHomeImageGalleryAdapter(
            instance,
            HomeFragmentModule_ProvideImageGalleryAdapterFactory.proxyProvideImageGalleryAdapter(
                homeFragmentModule));
        HomeFragment_MembersInjector.injectHomeEventsAdapter(
            instance,
            HomeFragmentModule_ProvideEventsAdapterFactory.proxyProvideEventsAdapter(
                homeFragmentModule));
        HomeFragment_MembersInjector.injectHomePlaceAdapter(
            instance,
            HomeFragmentModule_ProvideHomePlaceAdapterFactory.proxyProvideHomePlaceAdapter(
                homeFragmentModule));
        HomeFragment_MembersInjector.injectLayoutManager(
            instance, provideLinearLayoutManagerProvider);
        HomeFragment_MembersInjector.injectGridLayoutManager(
            instance, provideGridLayoutManagerProvider);
        return instance;
      }
    }
  }

  private final class MapSingleActivitySubcomponentBuilder
      extends ActivityBuilder_BindMapSingleActivity.MapSingleActivitySubcomponent.Builder {
    private MapSingleActivity seedInstance;

    @Override
    public ActivityBuilder_BindMapSingleActivity.MapSingleActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            MapSingleActivity.class.getCanonicalName() + " must be set");
      }
      return new MapSingleActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MapSingleActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MapSingleActivitySubcomponentImpl
      implements ActivityBuilder_BindMapSingleActivity.MapSingleActivitySubcomponent {
    private MapSingleActivitySubcomponentImpl(MapSingleActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(MapSingleActivity arg0) {
      injectMapSingleActivity(arg0);
    }

    private MapSingleActivity injectMapSingleActivity(MapSingleActivity instance) {
      BaseActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      BaseActivity_MembersInjector.injectAppPreferencesHelper(
          instance, DaggerAppComponent.this.getAppPreferencesHelper());
      MapSingleActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }
  }

  private final class SettingActivitySubcomponentBuilder
      extends ActivityBuilder_BindSettingActivity.SettingActivitySubcomponent.Builder {
    private SettingActivity seedInstance;

    @Override
    public ActivityBuilder_BindSettingActivity.SettingActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(SettingActivity.class.getCanonicalName() + " must be set");
      }
      return new SettingActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SettingActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SettingActivitySubcomponentImpl
      implements ActivityBuilder_BindSettingActivity.SettingActivitySubcomponent {
    private SettingActivitySubcomponentImpl(SettingActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(SettingActivity arg0) {
      injectSettingActivity(arg0);
    }

    private SettingActivity injectSettingActivity(SettingActivity instance) {
      BaseActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      BaseActivity_MembersInjector.injectAppPreferencesHelper(
          instance, DaggerAppComponent.this.getAppPreferencesHelper());
      return instance;
    }
  }

  private final class TalukActivitySubcomponentBuilder
      extends ActivityBuilder_BindTalukActivity.TalukActivitySubcomponent.Builder {
    private TalukActivity seedInstance;

    @Override
    public ActivityBuilder_BindTalukActivity.TalukActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(TalukActivity.class.getCanonicalName() + " must be set");
      }
      return new TalukActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(TalukActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class TalukActivitySubcomponentImpl
      implements ActivityBuilder_BindTalukActivity.TalukActivitySubcomponent {
    private Provider<
            TalukListFragmentProvider_ProvideListFragment.TalukListFragmentSubcomponent.Builder>
        talukListFragmentSubcomponentBuilderProvider;

    private Provider<
            TalukDetailFragmentProvider_ProvideTalukDetailFragment.TalukDetailFragmentSubcomponent
                .Builder>
        talukDetailFragmentSubcomponentBuilderProvider;

    private Provider<
            TalukAboutFragmentProvider_ProvideTalukAboutFragment.TalukAboutFragmentSubcomponent
                .Builder>
        talukAboutFragmentSubcomponentBuilderProvider;

    private Provider<
            TalukPlacesFragmentProvider_GetTalukPlacesFragment.TalukPlacesFragmentSubcomponent
                .Builder>
        talukPlacesFragmentSubcomponentBuilderProvider;

    private Provider<
            TalukGalleryFragmentProvider_ProvideTalukGalleryFragment
                .TalukGalleryFragmentSubcomponent.Builder>
        talukGalleryFragmentSubcomponentBuilderProvider;

    private Provider<
            TalukVideosFragmentProvider_GetTalukVideosFragment.TalukVideosFragmentSubcomponent
                .Builder>
        talukVideosFragmentSubcomponentBuilderProvider;

    private Provider<
            TalukEventFragmentProvider_GetTalukEventFragment.TalukEventFragmentSubcomponent.Builder>
        talukEventFragmentSubcomponentBuilderProvider;

    private TalukActivitySubcomponentImpl(TalukActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(7)
          .put(TalukListFragment.class, (Provider) talukListFragmentSubcomponentBuilderProvider)
          .put(TalukDetailFragment.class, (Provider) talukDetailFragmentSubcomponentBuilderProvider)
          .put(TalukAboutFragment.class, (Provider) talukAboutFragmentSubcomponentBuilderProvider)
          .put(TalukPlacesFragment.class, (Provider) talukPlacesFragmentSubcomponentBuilderProvider)
          .put(
              TalukGalleryFragment.class,
              (Provider) talukGalleryFragmentSubcomponentBuilderProvider)
          .put(TalukVideosFragment.class, (Provider) talukVideosFragmentSubcomponentBuilderProvider)
          .put(TalukEventFragment.class, (Provider) talukEventFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TalukActivitySubcomponentBuilder builder) {
      this.talukListFragmentSubcomponentBuilderProvider =
          new Provider<
              TalukListFragmentProvider_ProvideListFragment.TalukListFragmentSubcomponent
                  .Builder>() {
            @Override
            public TalukListFragmentProvider_ProvideListFragment.TalukListFragmentSubcomponent
                    .Builder
                get() {
              return new TalukListFragmentSubcomponentBuilder();
            }
          };
      this.talukDetailFragmentSubcomponentBuilderProvider =
          new Provider<
              TalukDetailFragmentProvider_ProvideTalukDetailFragment.TalukDetailFragmentSubcomponent
                  .Builder>() {
            @Override
            public TalukDetailFragmentProvider_ProvideTalukDetailFragment
                    .TalukDetailFragmentSubcomponent.Builder
                get() {
              return new TalukDetailFragmentSubcomponentBuilder();
            }
          };
      this.talukAboutFragmentSubcomponentBuilderProvider =
          new Provider<
              TalukAboutFragmentProvider_ProvideTalukAboutFragment.TalukAboutFragmentSubcomponent
                  .Builder>() {
            @Override
            public TalukAboutFragmentProvider_ProvideTalukAboutFragment
                    .TalukAboutFragmentSubcomponent.Builder
                get() {
              return new TalukAboutFragmentSubcomponentBuilder();
            }
          };
      this.talukPlacesFragmentSubcomponentBuilderProvider =
          new Provider<
              TalukPlacesFragmentProvider_GetTalukPlacesFragment.TalukPlacesFragmentSubcomponent
                  .Builder>() {
            @Override
            public TalukPlacesFragmentProvider_GetTalukPlacesFragment
                    .TalukPlacesFragmentSubcomponent.Builder
                get() {
              return new TalukPlacesFragmentSubcomponentBuilder();
            }
          };
      this.talukGalleryFragmentSubcomponentBuilderProvider =
          new Provider<
              TalukGalleryFragmentProvider_ProvideTalukGalleryFragment
                  .TalukGalleryFragmentSubcomponent.Builder>() {
            @Override
            public TalukGalleryFragmentProvider_ProvideTalukGalleryFragment
                    .TalukGalleryFragmentSubcomponent.Builder
                get() {
              return new TalukGalleryFragmentSubcomponentBuilder();
            }
          };
      this.talukVideosFragmentSubcomponentBuilderProvider =
          new Provider<
              TalukVideosFragmentProvider_GetTalukVideosFragment.TalukVideosFragmentSubcomponent
                  .Builder>() {
            @Override
            public TalukVideosFragmentProvider_GetTalukVideosFragment
                    .TalukVideosFragmentSubcomponent.Builder
                get() {
              return new TalukVideosFragmentSubcomponentBuilder();
            }
          };
      this.talukEventFragmentSubcomponentBuilderProvider =
          new Provider<
              TalukEventFragmentProvider_GetTalukEventFragment.TalukEventFragmentSubcomponent
                  .Builder>() {
            @Override
            public TalukEventFragmentProvider_GetTalukEventFragment.TalukEventFragmentSubcomponent
                    .Builder
                get() {
              return new TalukEventFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(TalukActivity arg0) {
      injectTalukActivity(arg0);
    }

    private TalukActivity injectTalukActivity(TalukActivity instance) {
      BaseActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      BaseActivity_MembersInjector.injectAppPreferencesHelper(
          instance, DaggerAppComponent.this.getAppPreferencesHelper());
      TalukActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class TalukListFragmentSubcomponentBuilder
        extends TalukListFragmentProvider_ProvideListFragment.TalukListFragmentSubcomponent
            .Builder {
      private TalukListFragmentModule talukListFragmentModule;

      private TalukListFragment seedInstance;

      @Override
      public TalukListFragmentProvider_ProvideListFragment.TalukListFragmentSubcomponent build() {
        if (talukListFragmentModule == null) {
          this.talukListFragmentModule = new TalukListFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              TalukListFragment.class.getCanonicalName() + " must be set");
        }
        return new TalukListFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(TalukListFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class TalukListFragmentSubcomponentImpl
        implements TalukListFragmentProvider_ProvideListFragment.TalukListFragmentSubcomponent {
      private TalukListFragmentModule talukListFragmentModule;

      private Provider<TalukListFragment> seedInstanceProvider;

      private TalukListFragmentModule_ProvideLinearLayoutManagerFactory
          provideLinearLayoutManagerProvider;

      private TalukListFragmentSubcomponentImpl(TalukListFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final TalukListFragmentSubcomponentBuilder builder) {
        this.talukListFragmentModule = builder.talukListFragmentModule;
        this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
        this.provideLinearLayoutManagerProvider =
            TalukListFragmentModule_ProvideLinearLayoutManagerFactory.create(
                builder.talukListFragmentModule, seedInstanceProvider);
      }

      @Override
      public void inject(TalukListFragment arg0) {
        injectTalukListFragment(arg0);
      }

      private TalukListFragment injectTalukListFragment(TalukListFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        TalukListFragment_MembersInjector.injectTalukListAdapter(
            instance,
            TalukListFragmentModule_ProvideTalukAdapterFactory.proxyProvideTalukAdapter(
                talukListFragmentModule));
        TalukListFragment_MembersInjector.injectMLayoutManager(
            instance, provideLinearLayoutManagerProvider);
        return instance;
      }
    }

    private final class TalukDetailFragmentSubcomponentBuilder
        extends TalukDetailFragmentProvider_ProvideTalukDetailFragment
            .TalukDetailFragmentSubcomponent.Builder {
      private TalukDetailFragment seedInstance;

      @Override
      public TalukDetailFragmentProvider_ProvideTalukDetailFragment.TalukDetailFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              TalukDetailFragment.class.getCanonicalName() + " must be set");
        }
        return new TalukDetailFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(TalukDetailFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class TalukDetailFragmentSubcomponentImpl
        implements TalukDetailFragmentProvider_ProvideTalukDetailFragment
            .TalukDetailFragmentSubcomponent {
      private TalukDetailFragmentSubcomponentImpl(TalukDetailFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(TalukDetailFragment arg0) {
        injectTalukDetailFragment(arg0);
      }

      private TalukDetailFragment injectTalukDetailFragment(TalukDetailFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class TalukAboutFragmentSubcomponentBuilder
        extends TalukAboutFragmentProvider_ProvideTalukAboutFragment.TalukAboutFragmentSubcomponent
            .Builder {
      private TalukAboutFragment seedInstance;

      @Override
      public TalukAboutFragmentProvider_ProvideTalukAboutFragment.TalukAboutFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              TalukAboutFragment.class.getCanonicalName() + " must be set");
        }
        return new TalukAboutFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(TalukAboutFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class TalukAboutFragmentSubcomponentImpl
        implements TalukAboutFragmentProvider_ProvideTalukAboutFragment
            .TalukAboutFragmentSubcomponent {
      private TalukAboutFragmentSubcomponentImpl(TalukAboutFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(TalukAboutFragment arg0) {
        injectTalukAboutFragment(arg0);
      }

      private TalukAboutFragment injectTalukAboutFragment(TalukAboutFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class TalukPlacesFragmentSubcomponentBuilder
        extends TalukPlacesFragmentProvider_GetTalukPlacesFragment.TalukPlacesFragmentSubcomponent
            .Builder {
      private TalukPlacesFragmentModule talukPlacesFragmentModule;

      private TalukPlacesFragment seedInstance;

      @Override
      public TalukPlacesFragmentProvider_GetTalukPlacesFragment.TalukPlacesFragmentSubcomponent
          build() {
        if (talukPlacesFragmentModule == null) {
          this.talukPlacesFragmentModule = new TalukPlacesFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              TalukPlacesFragment.class.getCanonicalName() + " must be set");
        }
        return new TalukPlacesFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(TalukPlacesFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class TalukPlacesFragmentSubcomponentImpl
        implements TalukPlacesFragmentProvider_GetTalukPlacesFragment
            .TalukPlacesFragmentSubcomponent {
      private TalukPlacesFragmentModule talukPlacesFragmentModule;

      private Provider<TalukPlacesFragment> seedInstanceProvider;

      private TalukPlacesFragmentModule_ProvideLinearLayoutManagerFactory
          provideLinearLayoutManagerProvider;

      private TalukPlacesFragmentSubcomponentImpl(TalukPlacesFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final TalukPlacesFragmentSubcomponentBuilder builder) {
        this.talukPlacesFragmentModule = builder.talukPlacesFragmentModule;
        this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
        this.provideLinearLayoutManagerProvider =
            TalukPlacesFragmentModule_ProvideLinearLayoutManagerFactory.create(
                builder.talukPlacesFragmentModule, seedInstanceProvider);
      }

      @Override
      public void inject(TalukPlacesFragment arg0) {
        injectTalukPlacesFragment(arg0);
      }

      private TalukPlacesFragment injectTalukPlacesFragment(TalukPlacesFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        TalukPlacesFragment_MembersInjector.injectPlaceAdapter(
            instance,
            TalukPlacesFragmentModule_ProvidePlaceAdapterFactory.proxyProvidePlaceAdapter(
                talukPlacesFragmentModule));
        TalukPlacesFragment_MembersInjector.injectLayoutManager(
            instance, provideLinearLayoutManagerProvider);
        return instance;
      }
    }

    private final class TalukGalleryFragmentSubcomponentBuilder
        extends TalukGalleryFragmentProvider_ProvideTalukGalleryFragment
            .TalukGalleryFragmentSubcomponent.Builder {
      private TalukGalleryFragmentModule talukGalleryFragmentModule;

      private TalukGalleryFragment seedInstance;

      @Override
      public TalukGalleryFragmentProvider_ProvideTalukGalleryFragment
              .TalukGalleryFragmentSubcomponent
          build() {
        if (talukGalleryFragmentModule == null) {
          this.talukGalleryFragmentModule = new TalukGalleryFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              TalukGalleryFragment.class.getCanonicalName() + " must be set");
        }
        return new TalukGalleryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(TalukGalleryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class TalukGalleryFragmentSubcomponentImpl
        implements TalukGalleryFragmentProvider_ProvideTalukGalleryFragment
            .TalukGalleryFragmentSubcomponent {
      private TalukGalleryFragmentModule talukGalleryFragmentModule;

      private Provider<TalukGalleryFragment> seedInstanceProvider;

      private TalukGalleryFragmentModule_ProvideTalukGridLayoutManagerFactory
          provideTalukGridLayoutManagerProvider;

      private TalukGalleryFragmentSubcomponentImpl(
          TalukGalleryFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final TalukGalleryFragmentSubcomponentBuilder builder) {
        this.talukGalleryFragmentModule = builder.talukGalleryFragmentModule;
        this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
        this.provideTalukGridLayoutManagerProvider =
            TalukGalleryFragmentModule_ProvideTalukGridLayoutManagerFactory.create(
                builder.talukGalleryFragmentModule, seedInstanceProvider);
      }

      @Override
      public void inject(TalukGalleryFragment arg0) {
        injectTalukGalleryFragment(arg0);
      }

      private TalukGalleryFragment injectTalukGalleryFragment(TalukGalleryFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        TalukGalleryFragment_MembersInjector.injectImageGalleryAdapter(
            instance,
            TalukGalleryFragmentModule_ProvideImageGalleryAdapterFactory
                .proxyProvideImageGalleryAdapter(talukGalleryFragmentModule));
        TalukGalleryFragment_MembersInjector.injectGridLayoutManager(
            instance, provideTalukGridLayoutManagerProvider);
        return instance;
      }
    }

    private final class TalukVideosFragmentSubcomponentBuilder
        extends TalukVideosFragmentProvider_GetTalukVideosFragment.TalukVideosFragmentSubcomponent
            .Builder {
      private TalukVideosFragmentModule talukVideosFragmentModule;

      private TalukVideosFragment seedInstance;

      @Override
      public TalukVideosFragmentProvider_GetTalukVideosFragment.TalukVideosFragmentSubcomponent
          build() {
        if (talukVideosFragmentModule == null) {
          this.talukVideosFragmentModule = new TalukVideosFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              TalukVideosFragment.class.getCanonicalName() + " must be set");
        }
        return new TalukVideosFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(TalukVideosFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class TalukVideosFragmentSubcomponentImpl
        implements TalukVideosFragmentProvider_GetTalukVideosFragment
            .TalukVideosFragmentSubcomponent {
      private TalukVideosFragmentModule talukVideosFragmentModule;

      private Provider<TalukVideosFragment> seedInstanceProvider;

      private TalukVideosFragmentModule_ProvideLinearLayoutManagerFactory
          provideLinearLayoutManagerProvider;

      private TalukVideosFragmentSubcomponentImpl(TalukVideosFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final TalukVideosFragmentSubcomponentBuilder builder) {
        this.talukVideosFragmentModule = builder.talukVideosFragmentModule;
        this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
        this.provideLinearLayoutManagerProvider =
            TalukVideosFragmentModule_ProvideLinearLayoutManagerFactory.create(
                builder.talukVideosFragmentModule, seedInstanceProvider);
      }

      @Override
      public void inject(TalukVideosFragment arg0) {
        injectTalukVideosFragment(arg0);
      }

      private TalukVideosFragment injectTalukVideosFragment(TalukVideosFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        TalukVideosFragment_MembersInjector.injectVideoListAdapter(
            instance,
            TalukVideosFragmentModule_ProvideVideoListAdapterFactory.proxyProvideVideoListAdapter(
                talukVideosFragmentModule));
        TalukVideosFragment_MembersInjector.injectLayoutManager(
            instance, provideLinearLayoutManagerProvider);
        return instance;
      }
    }

    private final class TalukEventFragmentSubcomponentBuilder
        extends TalukEventFragmentProvider_GetTalukEventFragment.TalukEventFragmentSubcomponent
            .Builder {
      private TalukEventFragmentModule talukEventFragmentModule;

      private TalukEventFragment seedInstance;

      @Override
      public TalukEventFragmentProvider_GetTalukEventFragment.TalukEventFragmentSubcomponent
          build() {
        if (talukEventFragmentModule == null) {
          this.talukEventFragmentModule = new TalukEventFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              TalukEventFragment.class.getCanonicalName() + " must be set");
        }
        return new TalukEventFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(TalukEventFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class TalukEventFragmentSubcomponentImpl
        implements TalukEventFragmentProvider_GetTalukEventFragment.TalukEventFragmentSubcomponent {
      private TalukEventFragmentModule talukEventFragmentModule;

      private Provider<TalukEventFragment> seedInstanceProvider;

      private TalukEventFragmentModule_ProvideLinearLayoutManagerFactory
          provideLinearLayoutManagerProvider;

      private TalukEventFragmentSubcomponentImpl(TalukEventFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final TalukEventFragmentSubcomponentBuilder builder) {
        this.talukEventFragmentModule = builder.talukEventFragmentModule;
        this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
        this.provideLinearLayoutManagerProvider =
            TalukEventFragmentModule_ProvideLinearLayoutManagerFactory.create(
                builder.talukEventFragmentModule, seedInstanceProvider);
      }

      @Override
      public void inject(TalukEventFragment arg0) {
        injectTalukEventFragment(arg0);
      }

      private TalukEventFragment injectTalukEventFragment(TalukEventFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        TalukEventFragment_MembersInjector.injectEventsAdapter(
            instance,
            TalukEventFragmentModule_ProvideEventsAdapterFactory.proxyProvideEventsAdapter(
                talukEventFragmentModule));
        TalukEventFragment_MembersInjector.injectLayoutManager(
            instance, provideLinearLayoutManagerProvider);
        return instance;
      }
    }
  }

  private final class ImageViewActivitySubcomponentBuilder
      extends ActivityBuilder_BindImageViewActivity.ImageViewActivitySubcomponent.Builder {
    private ImageViewActivityModule imageViewActivityModule;

    private ImageViewActivity seedInstance;

    @Override
    public ActivityBuilder_BindImageViewActivity.ImageViewActivitySubcomponent build() {
      if (imageViewActivityModule == null) {
        this.imageViewActivityModule = new ImageViewActivityModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            ImageViewActivity.class.getCanonicalName() + " must be set");
      }
      return new ImageViewActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ImageViewActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ImageViewActivitySubcomponentImpl
      implements ActivityBuilder_BindImageViewActivity.ImageViewActivitySubcomponent {
    private ImageViewActivityModule imageViewActivityModule;

    private ImageViewActivitySubcomponentImpl(ImageViewActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ImageViewActivitySubcomponentBuilder builder) {
      this.imageViewActivityModule = builder.imageViewActivityModule;
    }

    @Override
    public void inject(ImageViewActivity arg0) {
      injectImageViewActivity(arg0);
    }

    private ImageViewActivity injectImageViewActivity(ImageViewActivity instance) {
      BaseActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      BaseActivity_MembersInjector.injectAppPreferencesHelper(
          instance, DaggerAppComponent.this.getAppPreferencesHelper());
      ImageViewActivity_MembersInjector.injectImageViewAdapter(
          instance,
          ImageViewActivityModule_ProvideImageViewAdapterFactory.proxyProvideImageViewAdapter(
              imageViewActivityModule));
      return instance;
    }
  }

  private final class EventDetailActivitySubcomponentBuilder
      extends ActivityBuilder_BindEventDetailActivity.EventDetailActivitySubcomponent.Builder {
    private EventDetailActivity seedInstance;

    @Override
    public ActivityBuilder_BindEventDetailActivity.EventDetailActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            EventDetailActivity.class.getCanonicalName() + " must be set");
      }
      return new EventDetailActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(EventDetailActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class EventDetailActivitySubcomponentImpl
      implements ActivityBuilder_BindEventDetailActivity.EventDetailActivitySubcomponent {
    private EventDetailActivitySubcomponentImpl(EventDetailActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(EventDetailActivity arg0) {
      injectEventDetailActivity(arg0);
    }

    private EventDetailActivity injectEventDetailActivity(EventDetailActivity instance) {
      BaseActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      BaseActivity_MembersInjector.injectAppPreferencesHelper(
          instance, DaggerAppComponent.this.getAppPreferencesHelper());
      return instance;
    }
  }

  private final class VideosExploreActivitySubcomponentBuilder
      extends ActivityBuilder_BindVideosExploreActivity.VideosExploreActivitySubcomponent.Builder {
    private VideosExploreActivity seedInstance;

    @Override
    public ActivityBuilder_BindVideosExploreActivity.VideosExploreActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            VideosExploreActivity.class.getCanonicalName() + " must be set");
      }
      return new VideosExploreActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(VideosExploreActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class VideosExploreActivitySubcomponentImpl
      implements ActivityBuilder_BindVideosExploreActivity.VideosExploreActivitySubcomponent {
    private Provider<
            ExploreVideoFragmentProvider_ProvideExploreVideoFragment
                .ExploreVideoFragmentSubcomponent.Builder>
        exploreVideoFragmentSubcomponentBuilderProvider;

    private Provider<
            PlayVideoFragmentProvider_ProvidePlayVideoFragment.PlayVideoFragmentSubcomponent
                .Builder>
        playVideoFragmentSubcomponentBuilderProvider;

    private VideosExploreActivitySubcomponentImpl(
        VideosExploreActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(2)
          .put(
              ExploreVideoFragment.class,
              (Provider) exploreVideoFragmentSubcomponentBuilderProvider)
          .put(PlayVideoFragment.class, (Provider) playVideoFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final VideosExploreActivitySubcomponentBuilder builder) {
      this.exploreVideoFragmentSubcomponentBuilderProvider =
          new Provider<
              ExploreVideoFragmentProvider_ProvideExploreVideoFragment
                  .ExploreVideoFragmentSubcomponent.Builder>() {
            @Override
            public ExploreVideoFragmentProvider_ProvideExploreVideoFragment
                    .ExploreVideoFragmentSubcomponent.Builder
                get() {
              return new ExploreVideoFragmentSubcomponentBuilder();
            }
          };
      this.playVideoFragmentSubcomponentBuilderProvider =
          new Provider<
              PlayVideoFragmentProvider_ProvidePlayVideoFragment.PlayVideoFragmentSubcomponent
                  .Builder>() {
            @Override
            public PlayVideoFragmentProvider_ProvidePlayVideoFragment.PlayVideoFragmentSubcomponent
                    .Builder
                get() {
              return new PlayVideoFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(VideosExploreActivity arg0) {
      injectVideosExploreActivity(arg0);
    }

    private VideosExploreActivity injectVideosExploreActivity(VideosExploreActivity instance) {
      BaseActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      BaseActivity_MembersInjector.injectAppPreferencesHelper(
          instance, DaggerAppComponent.this.getAppPreferencesHelper());
      VideosExploreActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class ExploreVideoFragmentSubcomponentBuilder
        extends ExploreVideoFragmentProvider_ProvideExploreVideoFragment
            .ExploreVideoFragmentSubcomponent.Builder {
      private ExploreVideoFragmentModule exploreVideoFragmentModule;

      private ExploreVideoFragment seedInstance;

      @Override
      public ExploreVideoFragmentProvider_ProvideExploreVideoFragment
              .ExploreVideoFragmentSubcomponent
          build() {
        if (exploreVideoFragmentModule == null) {
          this.exploreVideoFragmentModule = new ExploreVideoFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              ExploreVideoFragment.class.getCanonicalName() + " must be set");
        }
        return new ExploreVideoFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ExploreVideoFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ExploreVideoFragmentSubcomponentImpl
        implements ExploreVideoFragmentProvider_ProvideExploreVideoFragment
            .ExploreVideoFragmentSubcomponent {
      private ExploreVideoFragmentModule exploreVideoFragmentModule;

      private Provider<ExploreVideoFragment> seedInstanceProvider;

      private ExploreVideoFragmentModule_ProvideLinearLayoutManagerFactory
          provideLinearLayoutManagerProvider;

      private ExploreVideoFragmentSubcomponentImpl(
          ExploreVideoFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final ExploreVideoFragmentSubcomponentBuilder builder) {
        this.exploreVideoFragmentModule = builder.exploreVideoFragmentModule;
        this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
        this.provideLinearLayoutManagerProvider =
            ExploreVideoFragmentModule_ProvideLinearLayoutManagerFactory.create(
                builder.exploreVideoFragmentModule, seedInstanceProvider);
      }

      @Override
      public void inject(ExploreVideoFragment arg0) {
        injectExploreVideoFragment(arg0);
      }

      private ExploreVideoFragment injectExploreVideoFragment(ExploreVideoFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        ExploreVideoFragment_MembersInjector.injectVideoListAdapter(
            instance,
            ExploreVideoFragmentModule_ProvideVideoListAdapterFactory.proxyProvideVideoListAdapter(
                exploreVideoFragmentModule));
        ExploreVideoFragment_MembersInjector.injectLayoutManager(
            instance, provideLinearLayoutManagerProvider);
        return instance;
      }
    }

    private final class PlayVideoFragmentSubcomponentBuilder
        extends PlayVideoFragmentProvider_ProvidePlayVideoFragment.PlayVideoFragmentSubcomponent
            .Builder {
      private PlayVideoFragment seedInstance;

      @Override
      public PlayVideoFragmentProvider_ProvidePlayVideoFragment.PlayVideoFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              PlayVideoFragment.class.getCanonicalName() + " must be set");
        }
        return new PlayVideoFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(PlayVideoFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PlayVideoFragmentSubcomponentImpl
        implements PlayVideoFragmentProvider_ProvidePlayVideoFragment
            .PlayVideoFragmentSubcomponent {
      private PlayVideoFragmentSubcomponentImpl(PlayVideoFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(PlayVideoFragment arg0) {
        injectPlayVideoFragment(arg0);
      }

      private PlayVideoFragment injectPlayVideoFragment(PlayVideoFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }
  }

  private final class PlaceActivitySubcomponentBuilder
      extends ActivityBuilder_BindPlaceActivity.PlaceActivitySubcomponent.Builder {
    private PlaceActivity seedInstance;

    @Override
    public ActivityBuilder_BindPlaceActivity.PlaceActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(PlaceActivity.class.getCanonicalName() + " must be set");
      }
      return new PlaceActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(PlaceActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class PlaceActivitySubcomponentImpl
      implements ActivityBuilder_BindPlaceActivity.PlaceActivitySubcomponent {
    private Provider<
            PlaceListFragmentProvider_ProvidePlaceListFragment.PlaceListFragmentSubcomponent
                .Builder>
        placeListFragmentSubcomponentBuilderProvider;

    private Provider<
            PlaceDetailFragmentProvider_ProvidePlaceDetailFragment.PlaceDetailFragmentSubcomponent
                .Builder>
        placeDetailFragmentSubcomponentBuilderProvider;

    private Provider<
            PlaceAboutFragmentProvider_ProvidePlaceAboutFragment.PlaceAboutFragmentSubcomponent
                .Builder>
        placeAboutFragmentSubcomponentBuilderProvider;

    private Provider<
            PlaceGalleryFragmentProvider_ProvidePlaceGalleryFragment
                .PlaceGalleryFragmentSubcomponent.Builder>
        placeGalleryFragmentSubcomponentBuilderProvider;

    private Provider<
            PlaceVideosFragmentProvider_GetPlaceVideosFragment.PlaceVideosFragmentSubcomponent
                .Builder>
        placeVideosFragmentSubcomponentBuilderProvider;

    private Provider<
            PlaceEventFragmentProvider_GetPlaceEventFragment.PlaceEventFragmentSubcomponent.Builder>
        placeEventFragmentSubcomponentBuilderProvider;

    private PlaceActivitySubcomponentImpl(PlaceActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(6)
          .put(PlaceListFragment.class, (Provider) placeListFragmentSubcomponentBuilderProvider)
          .put(PlaceDetailFragment.class, (Provider) placeDetailFragmentSubcomponentBuilderProvider)
          .put(PlaceAboutFragment.class, (Provider) placeAboutFragmentSubcomponentBuilderProvider)
          .put(
              PlaceGalleryFragment.class,
              (Provider) placeGalleryFragmentSubcomponentBuilderProvider)
          .put(PlaceVideosFragment.class, (Provider) placeVideosFragmentSubcomponentBuilderProvider)
          .put(PlaceEventFragment.class, (Provider) placeEventFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PlaceActivitySubcomponentBuilder builder) {
      this.placeListFragmentSubcomponentBuilderProvider =
          new Provider<
              PlaceListFragmentProvider_ProvidePlaceListFragment.PlaceListFragmentSubcomponent
                  .Builder>() {
            @Override
            public PlaceListFragmentProvider_ProvidePlaceListFragment.PlaceListFragmentSubcomponent
                    .Builder
                get() {
              return new PlaceListFragmentSubcomponentBuilder();
            }
          };
      this.placeDetailFragmentSubcomponentBuilderProvider =
          new Provider<
              PlaceDetailFragmentProvider_ProvidePlaceDetailFragment.PlaceDetailFragmentSubcomponent
                  .Builder>() {
            @Override
            public PlaceDetailFragmentProvider_ProvidePlaceDetailFragment
                    .PlaceDetailFragmentSubcomponent.Builder
                get() {
              return new PlaceDetailFragmentSubcomponentBuilder();
            }
          };
      this.placeAboutFragmentSubcomponentBuilderProvider =
          new Provider<
              PlaceAboutFragmentProvider_ProvidePlaceAboutFragment.PlaceAboutFragmentSubcomponent
                  .Builder>() {
            @Override
            public PlaceAboutFragmentProvider_ProvidePlaceAboutFragment
                    .PlaceAboutFragmentSubcomponent.Builder
                get() {
              return new PlaceAboutFragmentSubcomponentBuilder();
            }
          };
      this.placeGalleryFragmentSubcomponentBuilderProvider =
          new Provider<
              PlaceGalleryFragmentProvider_ProvidePlaceGalleryFragment
                  .PlaceGalleryFragmentSubcomponent.Builder>() {
            @Override
            public PlaceGalleryFragmentProvider_ProvidePlaceGalleryFragment
                    .PlaceGalleryFragmentSubcomponent.Builder
                get() {
              return new PlaceGalleryFragmentSubcomponentBuilder();
            }
          };
      this.placeVideosFragmentSubcomponentBuilderProvider =
          new Provider<
              PlaceVideosFragmentProvider_GetPlaceVideosFragment.PlaceVideosFragmentSubcomponent
                  .Builder>() {
            @Override
            public PlaceVideosFragmentProvider_GetPlaceVideosFragment
                    .PlaceVideosFragmentSubcomponent.Builder
                get() {
              return new PlaceVideosFragmentSubcomponentBuilder();
            }
          };
      this.placeEventFragmentSubcomponentBuilderProvider =
          new Provider<
              PlaceEventFragmentProvider_GetPlaceEventFragment.PlaceEventFragmentSubcomponent
                  .Builder>() {
            @Override
            public PlaceEventFragmentProvider_GetPlaceEventFragment.PlaceEventFragmentSubcomponent
                    .Builder
                get() {
              return new PlaceEventFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(PlaceActivity arg0) {
      injectPlaceActivity(arg0);
    }

    private PlaceActivity injectPlaceActivity(PlaceActivity instance) {
      BaseActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      BaseActivity_MembersInjector.injectAppPreferencesHelper(
          instance, DaggerAppComponent.this.getAppPreferencesHelper());
      PlaceActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class PlaceListFragmentSubcomponentBuilder
        extends PlaceListFragmentProvider_ProvidePlaceListFragment.PlaceListFragmentSubcomponent
            .Builder {
      private PlaceListFragmentModule placeListFragmentModule;

      private PlaceListFragment seedInstance;

      @Override
      public PlaceListFragmentProvider_ProvidePlaceListFragment.PlaceListFragmentSubcomponent
          build() {
        if (placeListFragmentModule == null) {
          this.placeListFragmentModule = new PlaceListFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              PlaceListFragment.class.getCanonicalName() + " must be set");
        }
        return new PlaceListFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(PlaceListFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PlaceListFragmentSubcomponentImpl
        implements PlaceListFragmentProvider_ProvidePlaceListFragment
            .PlaceListFragmentSubcomponent {
      private PlaceListFragmentModule placeListFragmentModule;

      private Provider<PlaceListFragment> seedInstanceProvider;

      private PlaceListFragmentModule_ProvideLinearLayoutManagerFactory
          provideLinearLayoutManagerProvider;

      private PlaceListFragmentSubcomponentImpl(PlaceListFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PlaceListFragmentSubcomponentBuilder builder) {
        this.placeListFragmentModule = builder.placeListFragmentModule;
        this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
        this.provideLinearLayoutManagerProvider =
            PlaceListFragmentModule_ProvideLinearLayoutManagerFactory.create(
                builder.placeListFragmentModule, seedInstanceProvider);
      }

      @Override
      public void inject(PlaceListFragment arg0) {
        injectPlaceListFragment(arg0);
      }

      private PlaceListFragment injectPlaceListFragment(PlaceListFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        PlaceListFragment_MembersInjector.injectPlaceAdapter(
            instance,
            PlaceListFragmentModule_ProvidePlaceListAdapterFactory.proxyProvidePlaceListAdapter(
                placeListFragmentModule));
        PlaceListFragment_MembersInjector.injectMLayoutManager(
            instance, provideLinearLayoutManagerProvider);
        return instance;
      }
    }

    private final class PlaceDetailFragmentSubcomponentBuilder
        extends PlaceDetailFragmentProvider_ProvidePlaceDetailFragment
            .PlaceDetailFragmentSubcomponent.Builder {
      private PlaceDetailFragment seedInstance;

      @Override
      public PlaceDetailFragmentProvider_ProvidePlaceDetailFragment.PlaceDetailFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              PlaceDetailFragment.class.getCanonicalName() + " must be set");
        }
        return new PlaceDetailFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(PlaceDetailFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PlaceDetailFragmentSubcomponentImpl
        implements PlaceDetailFragmentProvider_ProvidePlaceDetailFragment
            .PlaceDetailFragmentSubcomponent {
      private PlaceDetailFragmentSubcomponentImpl(PlaceDetailFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(PlaceDetailFragment arg0) {
        injectPlaceDetailFragment(arg0);
      }

      private PlaceDetailFragment injectPlaceDetailFragment(PlaceDetailFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class PlaceAboutFragmentSubcomponentBuilder
        extends PlaceAboutFragmentProvider_ProvidePlaceAboutFragment.PlaceAboutFragmentSubcomponent
            .Builder {
      private PlaceAboutFragment seedInstance;

      @Override
      public PlaceAboutFragmentProvider_ProvidePlaceAboutFragment.PlaceAboutFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              PlaceAboutFragment.class.getCanonicalName() + " must be set");
        }
        return new PlaceAboutFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(PlaceAboutFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PlaceAboutFragmentSubcomponentImpl
        implements PlaceAboutFragmentProvider_ProvidePlaceAboutFragment
            .PlaceAboutFragmentSubcomponent {
      private PlaceAboutFragmentSubcomponentImpl(PlaceAboutFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(PlaceAboutFragment arg0) {
        injectPlaceAboutFragment(arg0);
      }

      private PlaceAboutFragment injectPlaceAboutFragment(PlaceAboutFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class PlaceGalleryFragmentSubcomponentBuilder
        extends PlaceGalleryFragmentProvider_ProvidePlaceGalleryFragment
            .PlaceGalleryFragmentSubcomponent.Builder {
      private PlaceGalleryFragmentModule placeGalleryFragmentModule;

      private PlaceGalleryFragment seedInstance;

      @Override
      public PlaceGalleryFragmentProvider_ProvidePlaceGalleryFragment
              .PlaceGalleryFragmentSubcomponent
          build() {
        if (placeGalleryFragmentModule == null) {
          this.placeGalleryFragmentModule = new PlaceGalleryFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              PlaceGalleryFragment.class.getCanonicalName() + " must be set");
        }
        return new PlaceGalleryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(PlaceGalleryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PlaceGalleryFragmentSubcomponentImpl
        implements PlaceGalleryFragmentProvider_ProvidePlaceGalleryFragment
            .PlaceGalleryFragmentSubcomponent {
      private PlaceGalleryFragmentModule placeGalleryFragmentModule;

      private Provider<PlaceGalleryFragment> seedInstanceProvider;

      private PlaceGalleryFragmentModule_ProvidePlaceGridLayoutManagerFactory
          providePlaceGridLayoutManagerProvider;

      private PlaceGalleryFragmentSubcomponentImpl(
          PlaceGalleryFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PlaceGalleryFragmentSubcomponentBuilder builder) {
        this.placeGalleryFragmentModule = builder.placeGalleryFragmentModule;
        this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
        this.providePlaceGridLayoutManagerProvider =
            PlaceGalleryFragmentModule_ProvidePlaceGridLayoutManagerFactory.create(
                builder.placeGalleryFragmentModule, seedInstanceProvider);
      }

      @Override
      public void inject(PlaceGalleryFragment arg0) {
        injectPlaceGalleryFragment(arg0);
      }

      private PlaceGalleryFragment injectPlaceGalleryFragment(PlaceGalleryFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        PlaceGalleryFragment_MembersInjector.injectImageGalleryAdapter(
            instance,
            PlaceGalleryFragmentModule_ProvideImageGalleryAdapterFactory
                .proxyProvideImageGalleryAdapter(placeGalleryFragmentModule));
        PlaceGalleryFragment_MembersInjector.injectGridLayoutManager(
            instance, providePlaceGridLayoutManagerProvider);
        return instance;
      }
    }

    private final class PlaceVideosFragmentSubcomponentBuilder
        extends PlaceVideosFragmentProvider_GetPlaceVideosFragment.PlaceVideosFragmentSubcomponent
            .Builder {
      private PlaceVideosFragmentModule placeVideosFragmentModule;

      private PlaceVideosFragment seedInstance;

      @Override
      public PlaceVideosFragmentProvider_GetPlaceVideosFragment.PlaceVideosFragmentSubcomponent
          build() {
        if (placeVideosFragmentModule == null) {
          this.placeVideosFragmentModule = new PlaceVideosFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              PlaceVideosFragment.class.getCanonicalName() + " must be set");
        }
        return new PlaceVideosFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(PlaceVideosFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PlaceVideosFragmentSubcomponentImpl
        implements PlaceVideosFragmentProvider_GetPlaceVideosFragment
            .PlaceVideosFragmentSubcomponent {
      private PlaceVideosFragmentModule placeVideosFragmentModule;

      private Provider<PlaceVideosFragment> seedInstanceProvider;

      private PlaceVideosFragmentModule_ProvideLinearLayoutManagerFactory
          provideLinearLayoutManagerProvider;

      private PlaceVideosFragmentSubcomponentImpl(PlaceVideosFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PlaceVideosFragmentSubcomponentBuilder builder) {
        this.placeVideosFragmentModule = builder.placeVideosFragmentModule;
        this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
        this.provideLinearLayoutManagerProvider =
            PlaceVideosFragmentModule_ProvideLinearLayoutManagerFactory.create(
                builder.placeVideosFragmentModule, seedInstanceProvider);
      }

      @Override
      public void inject(PlaceVideosFragment arg0) {
        injectPlaceVideosFragment(arg0);
      }

      private PlaceVideosFragment injectPlaceVideosFragment(PlaceVideosFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        PlaceVideosFragment_MembersInjector.injectVideoListAdapter(
            instance,
            PlaceVideosFragmentModule_GetVideoListAdapterFactory.proxyGetVideoListAdapter(
                placeVideosFragmentModule));
        PlaceVideosFragment_MembersInjector.injectLayoutManager(
            instance, provideLinearLayoutManagerProvider);
        return instance;
      }
    }

    private final class PlaceEventFragmentSubcomponentBuilder
        extends PlaceEventFragmentProvider_GetPlaceEventFragment.PlaceEventFragmentSubcomponent
            .Builder {
      private PlaceEventFragmentModule placeEventFragmentModule;

      private PlaceEventFragment seedInstance;

      @Override
      public PlaceEventFragmentProvider_GetPlaceEventFragment.PlaceEventFragmentSubcomponent
          build() {
        if (placeEventFragmentModule == null) {
          this.placeEventFragmentModule = new PlaceEventFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              PlaceEventFragment.class.getCanonicalName() + " must be set");
        }
        return new PlaceEventFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(PlaceEventFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PlaceEventFragmentSubcomponentImpl
        implements PlaceEventFragmentProvider_GetPlaceEventFragment.PlaceEventFragmentSubcomponent {
      private PlaceEventFragmentModule placeEventFragmentModule;

      private Provider<PlaceEventFragment> seedInstanceProvider;

      private PlaceEventFragmentModule_ProvideLinearLayoutManagerFactory
          provideLinearLayoutManagerProvider;

      private PlaceEventFragmentSubcomponentImpl(PlaceEventFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PlaceEventFragmentSubcomponentBuilder builder) {
        this.placeEventFragmentModule = builder.placeEventFragmentModule;
        this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
        this.provideLinearLayoutManagerProvider =
            PlaceEventFragmentModule_ProvideLinearLayoutManagerFactory.create(
                builder.placeEventFragmentModule, seedInstanceProvider);
      }

      @Override
      public void inject(PlaceEventFragment arg0) {
        injectPlaceEventFragment(arg0);
      }

      private PlaceEventFragment injectPlaceEventFragment(PlaceEventFragment instance) {
        BaseFragment_MembersInjector.injectFactory(
            instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        PlaceEventFragment_MembersInjector.injectEventsAdapter(
            instance,
            PlaceEventFragmentModule_ProvideEventsAdapterFactory.proxyProvideEventsAdapter(
                placeEventFragmentModule));
        PlaceEventFragment_MembersInjector.injectLayoutManager(
            instance, provideLinearLayoutManagerProvider);
        return instance;
      }
    }
  }

  private final class AboutActivitySubcomponentBuilder
      extends ActivityBuilder_BindAboutActivity.AboutActivitySubcomponent.Builder {
    private AboutActivity seedInstance;

    @Override
    public ActivityBuilder_BindAboutActivity.AboutActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(AboutActivity.class.getCanonicalName() + " must be set");
      }
      return new AboutActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(AboutActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class AboutActivitySubcomponentImpl
      implements ActivityBuilder_BindAboutActivity.AboutActivitySubcomponent {
    private AboutActivitySubcomponentImpl(AboutActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(AboutActivity arg0) {
      injectAboutActivity(arg0);
    }

    private AboutActivity injectAboutActivity(AboutActivity instance) {
      BaseActivity_MembersInjector.injectFactory(
          instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      BaseActivity_MembersInjector.injectAppPreferencesHelper(
          instance, DaggerAppComponent.this.getAppPreferencesHelper());
      return instance;
    }
  }
}
