// Generated by Dagger (https://google.github.io/dagger).
package application.haveri.tourism.di.module;

import application.haveri.tourism.data.AppDataManager;
import application.haveri.tourism.data.DataManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideDataManagerFactory implements Factory<DataManager> {
  private final AppModule module;

  private final Provider<AppDataManager> appDataManagerProvider;

  public AppModule_ProvideDataManagerFactory(
      AppModule module, Provider<AppDataManager> appDataManagerProvider) {
    this.module = module;
    this.appDataManagerProvider = appDataManagerProvider;
  }

  @Override
  public DataManager get() {
    return provideInstance(module, appDataManagerProvider);
  }

  public static DataManager provideInstance(
      AppModule module, Provider<AppDataManager> appDataManagerProvider) {
    return proxyProvideDataManager(module, appDataManagerProvider.get());
  }

  public static AppModule_ProvideDataManagerFactory create(
      AppModule module, Provider<AppDataManager> appDataManagerProvider) {
    return new AppModule_ProvideDataManagerFactory(module, appDataManagerProvider);
  }

  public static DataManager proxyProvideDataManager(
      AppModule instance, AppDataManager appDataManager) {
    return Preconditions.checkNotNull(
        instance.provideDataManager(appDataManager),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
